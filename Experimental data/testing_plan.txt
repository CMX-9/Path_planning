5*5
斜线：A（0.65，3.32KB）B（0.75，1.61kb）C（0.65，1.45kb）

20*20
1、无障碍物
小斜线：A（1.461ms，7KB）B(2.1，19kB)C（1.97,21.64KB）；大斜线A（8.2ms，69KB）B(8.5，15kB)C（8.25,22.32KB）
直线：A(0.73,3.45kb)B（1.23，20kb）C（1.25,21.67kb）
2、随机障碍物
A（6，27KB）B（6，17.6kb）C（6，22kb）
3、迷宫
A(5.2,27kb)B（5.5，18kb）C（5.3,22.92kb）
4、单墙面(差不多)
A(3.5,18.01kb)B（3.75，20kb）C（3.5,22.09kb）
5、边界条件测试

50*50
随机障碍物：（好像也就斜线情况B和C明显优，B更优，直线下A好像优一些，但差别不是很大好像）
A(96,342kb，81)B（37，94kb，81）C（38,141.32kb）
迷宫（这个场景感觉还是B和C优一些，B比C优一些）
A(42,140kb，81)B（27，104kb，81）C（28,141.69kb）

0~20
感觉可能小规模的A略微好一点点，但区别不是很大
20~50

99*99
随机障碍物（B和C优于A，B略优于C）
A(205,358kb，103)B（51，465kb，103）C（56,555kb，103）
迷宫
感觉是越复杂的场景B和C表现约优秀，且B总略优于C

下面均满足：
起点=终点
起点被障碍物包围（无解场景）
终点在网格外

99*99
100x100全通网格，起点(0,0)，终点(99,99)
预期结果：路径存在，算法运行时间<500ms
考察点
算法时间复杂度
内存是否溢出（尤其关注tracemalloc输出）

内存泄漏测试
连续调用算法100次（如循环执行小网格路径规划）
监控内存增长趋势（通过tracemalloc统计数据）
考察点
代码是否有未释放的资源
临时变量是否及时清理


200*200（场景简单的话还是A略优一些，但场景越复杂，B越优且明显速度快很多，C略差于B）
A(205,358kb，103)B（51，465kb，103）C（56,555kb，103）